import sys
import snakemake
import ops.firesnake
from ops.firesnake import Snake
import ops.io
from ops.io import read_stack as read
import numpy as np
import pandas as pd


THRESHOLD_HOECHST = 1000
NUCLEUS_AREA_PH = 40, 600


WELL = ['A1','A2']
SITES = [str(c).zfill(4) for c in range(308)]

# .tif file metadata recognized by ImageJ
DISPLAY_RANGES=((500, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000))
LUTS = ops.io.GRAY, ops.io.GREEN, ops.io.RED, ops.io.MAGENTA, ops.io.CYAN


basedir ="M60/livecell"
       
rule all:
    input:
    # can request individual files here 
        expand('{basedir}/livecellprocess/10X_{well}_Site-{site}.phenotype_live.csv', basedir=basedir, well = WELL, site = (SITES)),
        expand('{basedir}/livecellprocess/10X_{well}_Site-{site}.live_endpoint.csv', basedir=basedir, well = WELL, site = (SITES))


rule save_to_tif: 
    input:
        '{basedir}/Well{well}_Point{well}_{site}_ChannelDAPI_30p,GFP_loaner_10p.nd2.ms'
    # wildcard_constraints:
    output:
        '{basedir}/input/Well{well}_{site}.tif'
    run:
        Snake.nd2_to_tif_noz(output=output, data=input[0], save_multi_output = False, start_site = 11, end_site = 22)
 
rule subtract_background:
    priority: -1
    input:
        '{basedir}/input/Well{well}_{site}.tif'
    output:
        ('{basedir}/livecellprocess/10X_{well}_Site-{site}.bsub.tif')

    run:
        Snake.rolling_ball_bsub(output=output,data=input[0],radius=20)

rule align_live:
    input:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.bsub.tif'
    output:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.aligned_live.tif'
    run:
        from ops.process import Align

        data = read(input[0])
        data = data.reshape(-1, 2, data.shape[-2], data.shape[-1])
        if data[-1].sum() == 0:
            data = data[:-1]
        aligned = Align.align_between_cycles(data, 0, upsample_factor=2, window=2)
        ops.io.save_stack(output[0], aligned)

rule segment_nuclei_live:
    input:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.aligned_live.tif'
    output:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.nuclei_live.tif'
    run:
        hoechst = ops.io.read_stack(input[0])[:, 0]
        Snake.segment_nuclei_stack(output=output, dapi=hoechst, 
            threshold=THRESHOLD_HOECHST, area_min=NUCLEUS_AREA_PH[0], area_max=NUCLEUS_AREA_PH[1], compress=1)

        
rule track_nuclei:
    input:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.nuclei_live.tif'
    output:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.nuclei_tracked.tif'
    run:
        Snake.track_live_nuclei(output=output, nuclei=input[0], compress=1)

        
        
rule extract_phenotype_live:
    input:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.aligned_live.tif',
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.nuclei_tracked.tif'
    output:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.phenotype_live.csv'
    run:
        Snake.extract_phenotype_translocation_live(output=output,
            data=input[0], nuclei=input[1], wildcards=wildcards) 


rule extract_live_endpoint:
    input:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.aligned_live.tif',
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.nuclei_live.tif'
    output:
        '{basedir}/livecellprocess/10X_{well}_Site-{site}.live_endpoint.csv'
    run:
        last_d = ops.io.read_stack(input[0])[-1]
        last_n = ops.io.read_stack(input[1])[-1]
        Snake.extract_phenotype_minimal(output=output, data_phenotype=last_d, 
            nuclei=last_n, wildcards=wildcards) 
        
       


