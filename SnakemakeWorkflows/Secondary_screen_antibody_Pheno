import snakemake
import ops.firesnake
from ops.firesnake import Snake
import ops.io
from ops.io import read_stack, save_stack
from glob import glob
import numpy as np

###
###

SITES = range(1024)
WELLS = ['B1','B2']


rule all:
    input:
    # can request individual files here 
        expand('process/pheno/Well{well}_site-{site}.morph.csv', well = WELLS, site = SITES)
        expand('process/pheno/Well{well}_site-{site}.ch3.csv', well = WELLS, site = SITES),
        expand('process/pheno/Well{well}_site-{site}.ch2.csv', well = WELLS, site = SITES),
        expand('process/pheno/Well{well}_site-{site}.ch1.csv', well = WELLS, site = SITES),
        expand('process/pheno/Well{well}_site-{site}.dapi.csv', well = WELLS, site = SITES)



rule save_to_tif: 
    input:
        'pheno/Well{well}.nd2.ms'
    output:
        expand('process/pheno/Well{{well}}_site-{site}.tif', site = range(0,1024))
    priority:
        1
    run:
        Snake.nd2_to_tif_z(output=output, data=input[0], save_multi_output = True, start_site = 0, end_site = 300)


# SEGMENTATION
rule segment_nuclei:
    input:
        'process/pheno/Well{well}_site-{site}.tif'
    output:
        ('process/pheno/Well{well}_site-{site}.nuclei.tif')
    run:
        Snake.segment_nuclei(output=output, data=input[0], 
            threshold=12000, area_min=160, area_max=2000) 

rule segment_cells:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        'process/pheno/Well{well}_site-{site}.tif',
        'process/pheno/Well{well}_site-{site}.nuclei.tif'
    output:
        ('process/pheno/Well{well}_site-{site}.cells.tif')
    run:
        Snake.segment_cells(output=output, 
            data=input[0], nuclei=input[1], threshold=7500, chstart = 0, chend = 1) 

rule find_cytoplasm:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        'process/pheno/Well{well}_site{site}.nuclei.tif',
        'process/pheno/Well{well}_site{site}.cells.tif'
    output:
        ('process/pheno/Well{well}_site{site}.cytoplasm.tif')
    run:
        Snake.find_cytoplasm(output=output, 
            nuclei=input[0], cells=input[1])


rule extract_pheno_0:
    priority: 10
    input:
        'process/pheno/Well{well}_site{site}.tif',
        'process/pheno/Well{well}_site{site}.nuclei.tif',
        'process/pheno/Well{well}_site{site}.cells.tif',
        'process/pheno/Well{well}_site{site}.cytoplasm.tif'  
    output:
        ('process/pheno/Well{well}_site{site}.dapi.csv')
    run:
        Snake.extract_phenotype_extended_channel(output=output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], cytoplasm=input[3], channel = 0, corrchannel1 = 1, corrchannel2 = 2,  wildcards=dict(wildcards))

rule extract_pheno_1:
    input:
        'process/pheno/Well{well}_site{site}.tif',
        'process/pheno/Well{well}_site{site}.nuclei.tif',
        'process/pheno/Well{well}_site{site}.cells.tif',
        'process/pheno/Well{well}_site{site}.cytoplasm.tif'  
    output:
        ('process/pheno/Well{well}_site{site}.ch1.csv')
    run:
        Snake.extract_phenotype_extended_channel(output=output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], cytoplasm=input[3], channel = 1, corrchannel2 = 2,  wildcards=dict(wildcards))

rule extract_pheno_2:
    input:
        'process/pheno/Well{well}_site{site}.tif',
        'process/pheno/Well{well}_site{site}.nuclei.tif',
        'process/pheno/Well{well}_site{site}.cells.tif',
        'process/pheno/Well{well}_site{site}.cytoplasm.tif'  
    output:
        ('process/pheno/Well{well}_site{site}.ch2.csv')
    run:
        Snake.extract_phenotype_extended_channel(output=output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], cytoplasm=input[3], channel = 2,  wildcards=dict(wildcards))

rule extract_pheno_3:
    input:
        'process/pheno/Well{well}_site{site}.tif',
        'process/pheno/Well{well}_site{site}.nuclei.tif',
        'process/pheno/Well{well}_site{site}.cells.tif',
        'process/pheno/Well{well}_site{site}.cytoplasm.tif'  
    output:
        ('process/pheno/Well{well}_site{site}.ch3.csv')
    run:
        Snake.extract_phenotype_extended_channel(output=output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], cytoplasm=input[3], channel = 3,  corrchannel2 = 2 , wildcards=dict(wildcards))

rule extract_pheno_morph:
    input:
        'process/pheno/Well{well}_site{site}.tif',
        'process/pheno/Well{well}_site{site}.nuclei.tif',
        'process/pheno/Well{well}_site{site}.cells.tif',
        'process/pheno/Well{well}_site{site}.cytoplasm.tif'  
    output:
        ('process/pheno/Well{well}_site{site}.morph.csv')
    run:
        Snake.extract_phenotype_extended_morphology(output=output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], cytoplasm=input[3],  wildcards=dict(wildcards))
