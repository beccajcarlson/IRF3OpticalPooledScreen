import snakemake
import ops.firesnake
from ops.firesnake import Snake
import ops.io
from ops.io import read_stack, save_stack
from glob import glob
import numpy as np

###
###


WELLS = [r + str(c).zfill(2) for r in 'ABCDEFGH' for c in range(1,11)] #
PLATES = ['M136']
SITES = [str(r).zfill(4) for r in range(12)]

rule all:
    input:
    # can request individual files here 
        expand('{plate}/process/Well{well}_site-{site}.rig.csv', plate = PLATES, well = WELLS, site = SITES),      

## SEGMENTATION
rule segment_nuclei:
    input:
        '{plate}/Well{well}_Point{well}_{site}_ChannelDAPI_5p,GFP_loaner_3p,CY3_50p,A594_30p,AF750_CY7_pos.nd2'
    output:
        ('{plate}/process/Well{well}_site-{site}.nuclei.tif')
    run:
        Snake.segment_nuclei(output=output, data=input[0], 
            threshold=2000, area_min=160, area_max=1200, radius=15) #

rule segment_cells:
    """segment_cells works best when fed data with the most cytoplasmic autofluorescence. SBS data is OK but
    not the best if something else is available.
    """
    input:
        '{plate}/Well{well}_Point{well}_{site}_ChannelDAPI_5p,GFP_loaner_3p,CY3_50p,A594_30p,AF750_CY7_pos.nd2',
        '{plate}/process/Well{well}_site-{site}.nuclei.tif'
    output:
        ('{plate}/process/Well{well}_site-{site}.cells.tif')
    run:
        Snake.segment_cells(output=output, 
            data=input[0], nuclei=input[1], threshold=1800, chstart = 3, chend = 4) #


rule extract_pheno_3:
    input:
        '{plate}/Well{well}_Point{well}_{site}_ChannelDAPI_5p,GFP_loaner_3p,CY3_50p,A594_30p,AF750_CY7_pos.nd2',
        '{plate}/process/Well{well}_site-{site}.nuclei.tif',
        '{plate}/process/Well{well}_site-{site}.cells.tif'
    output:
        ('{plate}/process/Well{well}_site-{site}.rig.csv')
    run:
        Snake.extract_phenotype_extended_channel(output=output, 
            data_phenotype=input[0], nuclei=input[1], cells=input[2], cytoplasm=None, channel = 3, corrchannel1 = 1, corrchannel2 = 2,  wildcards=dict(wildcards))
